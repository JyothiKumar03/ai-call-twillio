name: Repository Monitor
on:
  push:
  pull_request:
    types: [opened, closed, reopened]
  create:
  delete:
  issues:
    types: [opened, closed, reopened]
  issue_comment:
    types: [created]
  watch:
    types: [started]
  fork:
  release:
    types: [published]

jobs:
  notify:
    runs-on: ubuntu-latest
    steps:
      - name: Send to Slack
        env:
          GLOBAL_SLACK_WEBHOOK_URL: ${{ secrets.GLOBAL_SLACK_WEBHOOK_URL }}
        run: |
          EVENT_TYPE="${{ github.event_name }}"
          REPO="${{ github.repository }}"
          ACTOR="${{ github.actor }}"

          case $EVENT_TYPE in
            push)
              MESSAGE="üî® *New Push to Repository*
              ‚Ä¢ *Repository:* \`$REPO\`
              ‚Ä¢ *Actor:* \`$ACTOR\`
              ‚Ä¢ *Branch:* \`${{ github.ref_name }}\`
              ‚Ä¢ *Commit:* \`${{ github.sha }}\`
              ‚Ä¢ *Message:* \`${{ github.event.head_commit.message }}\`
              ‚Ä¢ <${{ github.event.head_commit.url }}|View Commit>"
              ;;
            pull_request)
              PR_ACTION="${{ github.event.action }}"
              PR_TITLE="${{ github.event.pull_request.title }}"
              PR_URL="${{ github.event.pull_request.html_url }}"
              MESSAGE="üîÄ *Pull Request $PR_ACTION*
              ‚Ä¢ *Repository:* \`$REPO\`
              ‚Ä¢ *Actor:* \`$ACTOR\`
              ‚Ä¢ *Title:* $PR_TITLE
              ‚Ä¢ <$PR_URL|View Pull Request>"
              ;;
            create | delete)
              REF_TYPE="${{ github.event.ref_type }}"
              REF="${{ github.event.ref }}"
              MESSAGE="üè∑Ô∏è *$REF_TYPE $EVENT_TYPE*
              ‚Ä¢ *Repository:* \`$REPO\`
              ‚Ä¢ *Actor:* \`$ACTOR\`
              ‚Ä¢ *$REF_TYPE:* \`$REF\`"
              ;;
            issues)
              ISSUE_ACTION="${{ github.event.action }}"
              ISSUE_TITLE="${{ github.event.issue.title }}"
              ISSUE_URL="${{ github.event.issue.html_url }}"
              MESSAGE="üìå *Issue $ISSUE_ACTION*
              ‚Ä¢ *Repository:* \`$REPO\`
              ‚Ä¢ *Actor:* \`$ACTOR\`
              ‚Ä¢ *Title:* $ISSUE_TITLE
              ‚Ä¢ <$ISSUE_URL|View Issue>"
              ;;
            issue_comment)
              ISSUE_TITLE="${{ github.event.issue.title }}"
              COMMENT_URL="${{ github.event.comment.html_url }}"
              MESSAGE="üí¨ *New Comment on Issue*
              ‚Ä¢ *Repository:* \`$REPO\`
              ‚Ä¢ *Actor:* \`$ACTOR\`
              ‚Ä¢ *Issue:* $ISSUE_TITLE
              ‚Ä¢ <$COMMENT_URL|View Comment>"
              ;;
            watch)
              MESSAGE="‚≠ê *Repository Starred*
              ‚Ä¢ *Repository:* \`$REPO\`
              ‚Ä¢ *Starred by:* \`$ACTOR\`"
              ;;
            fork)
              FORK_URL="${{ github.event.forkee.html_url }}"
              MESSAGE="üç¥ *Repository Forked*
              ‚Ä¢ *Original Repository:* \`$REPO\`
              ‚Ä¢ *Forked by:* \`$ACTOR\`
              ‚Ä¢ <$FORK_URL|View Fork>"
              ;;
            release)
              RELEASE_NAME="${{ github.event.release.name }}"
              RELEASE_URL="${{ github.event.release.html_url }}"
              MESSAGE="üöÄ *New Release Published*
              ‚Ä¢ *Repository:* \`$REPO\`
              ‚Ä¢ *Actor:* \`$ACTOR\`
              ‚Ä¢ *Release:* $RELEASE_NAME
              ‚Ä¢ <$RELEASE_URL|View Release>"
              ;;
            *)
              MESSAGE="üîî *Unhandled Event*
              ‚Ä¢ *Repository:* \`$REPO\`
              ‚Ä¢ *Event Type:* \`$EVENT_TYPE\`"
              ;;
          esac

          # Escape special characters for JSON
          MESSAGE=$(echo "$MESSAGE" | sed 's/"/\\"/g' | sed ':a;N;$!ba;s/\n/\\n/g')

          curl -X POST -H "Content-Type: application/json" -d "{
            \"text\": \"$MESSAGE\"
          }" $GLOBAL_SLACK_WEBHOOK_URL
